-----------------------------
Introduction
-----------------------------
 
Aleatoric is a library for composing aleatoric and electronic music.  Composers use Aleatoric's musical score language, called Composer.  Composer is a simple and clear language for specifying musical notes, organizing notes into phrases or measures, specifying software ensembles of performers intended to play the notes, and adding written instructions for those performers to follow.  The goal of Composer is to read very naturally and intuitively to a composer, and to provide tools specifically for aleatoric musical scores.

The building blocks of a musical score in Composer are notes, phrases or measures, players (performers), ensembles, general performance instructions and improvisation instructions.  There are also instructions to render the performance into a sound file.  Advanced users can use loop commands to repeat a part of a score, and can even define custom programming functions.
 
Aleatoric provides a complete separation between the commands that define musical events and the code created to realize a performance of those events.  Composers use the Composer language to write scores.  The code that performs the score and generates a sound file is written in the Ruby programming language, using the framework provided by Aleatoric.  Musical composers can thus write a score with notes and instructions and never have to concern themself (or look at or understand) any of the performance code.  And the collaborator writing the performance code need only understand the instructions in the score, which are written as standard sentences, to create a system that fulfills them.

In fact a key goal of Aleatoric is to keep these two artifacts separate (borrowing an idea from Behavior Driver Software testing, see http://github.com/aslakhellesoy/cucumber/tree/master as an example), and to thus mirror the relationship between real-world aleatoric composers and the performers who interpret and perform their scores.  

When score and performance code are complete, Aleatoric combines them to create the final sound file performance.  Of course, you can create as many performances as you want.

-----------------------------
A Simple Example
-----------------------------
 
Here is a simple example of a Composer score:
 
  phrase "Intro Phrase"
    note "1"
      instrument  1 
      start       0.0 
      duration    0.5
      amplitude   1000
      pitch       7.01
    note "2"
      instrument  1
      start       1.0 
      duration    1.0
      amplitude   1100
      pitch       7.02
 
  render "my_composition.wav"
    phrases   "Intro Phrase"
    format    csound
    orchestra  "my_csound_orchestra.orc"
 
This score defines two notes as part of a phrase "Intro Phrase," then renders them to an audio file.  Note the consistent and simple syntax of the language.  Indentation is optional, but should be used to show structure.  Here we see that each 'note' is part of the 'phrase,' and each line indented under each note defines an attribute of the note.

In this example, rendering is done using the cross-platform electronic music composition software CSound.  At this time, Aleatoric supports rendering to either MIDI or CSound, and runs on Windows and Mac.
 
-----------------------------
Documentation and Examples
-----------------------------
 
For a complete overview of the Composer language, for both musical composers and programmers, see the language documentation and examples here: http://wiki.github.com/marksweiss/aleatoric/composer-1-introduction

For programmers implementing ensembles to perform scores, there is the documented Aleatoric Ensemble API.  There is also a non-trivial reference project, a realization of Terry Riley's "In C," which includes:
-- a score
http://github.com/marksweiss/aleatoric/blob/master/compositions/Terry_Riley-In_C/in_c.altc
-- an example software ensemble that performs it
http://github.com/marksweiss/aleatoric/blob/master/compositions/Terry_Riley-In_C/In_C_midi_user_instruction.rb
-- two example performances
http://github.com/marksweiss/aleatoric/blob/master/compositions/Terry_Riley-In_C/In_C__perf_1.mid http://github.com/marksweiss/aleatoric/blob/master/compositions/Terry_Riley-In_C/In_C__perf_2.mid  

Also, documentation generated from the Aleatoric API code is here (in progress):
http://github.com/marksweiss/aleatoric/tree/master/doc
