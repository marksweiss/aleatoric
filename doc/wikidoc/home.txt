*Overview*
 
Aleatoric is a tool for musical composers and programmers collaborate to create aleatoric musical scores and software ensembles of performers to perform them.  Performances result in a rendered sound file.  As in real-world aleatoric music, composers define musical events and provide performance directions, and performers interpret the directions, perform the score and thus realize the composition.

The most important design goals of Aleaotoric are:
 * To provide musical composers with a simple, natural and intuitive language to define musical events and performance instructions
 * To provide programmers with an intuitive, simple, powerful and extendable framework for creating software performers to realize the score
 * To allow each to collaborate with the other using a separate language they are comfortable with, needing only to understand and agree upon the meaning of the score's performance instructions, which can be named and described using any words or sentences the composer chooses. (This borrows an idea from Behavior Driven Software testing, see "cucumber":http://github.com/aslakhellesoy/cucumber/tree/master as an example if you are interested.) 

Composers use Aleatoric's musical score language, called Composer.  Composer is a simple and clear language for specifying musical notes, organizing notes into phrases or measures, specifying software ensembles of performers, and adding written instructions for those performers to follow.  There are also instructions to render the performance into a sound file.
 
Programmers write the code that performs the score and generates a sound file in the Ruby programming language, using the framework provided by Aleatoric.

When score and performance code are complete, Aleatoric combines them to create the final sound file performance.

*A Simple Example*
 
Here is a simple but complete example of a Composer score:
 
&nbsp;&nbsp;@phrase "Intro Phrase"@
&nbsp;&nbsp;&nbsp;&nbsp;@note "1"@
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@instrument  1@
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@start       0.0@
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@duration    0.5@
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@amplitude   1000@
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@pitch       7.01@
&nbsp;&nbsp;&nbsp;&nbsp;@note "2"@
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@instrument  1@
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@start       1.0@
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@duration    1.0@
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@amplitude   1100@
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@pitch       7.02@
 
&nbsp;&nbsp;@render "my_composition.wav"@
&nbsp;&nbsp;&nbsp;&nbsp;@phrases   "Intro Phrase"@
&nbsp;&nbsp;&nbsp;&nbsp;@format    csound@
&nbsp;&nbsp;&nbsp;&nbsp;@orchestra  "my_csound_orchestra.orc"@
 
This score defines two notes as part of a phrase "Intro Phrase," then renders them to an audio file.  Note the consistent and simple syntax of the language.  Indentation is optional, but should be used to show structure.  Here we see that each 'note' is part of the 'phrase,' and each line indented under each note defines an attribute of the note.

In this example, rendering is done using the cross-platform electronic music composition software CSound.  At this time, Aleatoric supports rendering to either MIDI or CSound, and runs on Windows and Mac.

*Next Steps*

Musical composers should be able to get started creating and rendering scores reading only the Composer "documentation":http://wiki.github.com/marksweiss/aleatoric/composer-1-introduction.

Likewise programmers should be able to create players and ensembles to play scores by referring to the "Aleatoric API":http://TODO documentation.
