_num_steps = 1
_resolution = 50
_amp_fctr = 1200
_dummy_name = ""

# This is function declaration syntax.  Functions can be anywhere in the script, but can't 
#  be nested within anything else (not within sections, phrases, notes, write, repeat, format blocks etc.)
loop_step_u: start, step, index
  start + (step * index)
  
loop_step_d: start, step, index
  start - (step * index)

cycle: x, resolution
  # sin(0 radians) == 0.0, sin(0.5 * PI) radians == 1.0, sine PI == 0.0, sine (1.5 * PI) == -1.0
  Math.sin ((x % resolution) * Math::PI)

decay: val, fade_factor
   val * (1.0 / (Math.log10((fade_factor + 1).to_f) + 1.0))
   
format csound

repeat _num_steps
  measure "Measure 1"
    note "Measure 1 1"
      instrument  1      
      start       index
      duration    D_16
      amplitude   decay: _amp_fctr, index
      pitch       C4 + (cycle: index, _num_steps)
      func_table  1
    # TODO - Implement a 'next' keyword for 'measure' so can just declare sequences of note
    note "Measure 1 2"
      instrument  1      
      start       index 
      duration    D_16
      amplitude   decay: _amp_fctr, index
      pitch       C2 + (cycle: index, _num_steps)
      func_table  1      
    note "Measure 1 3"
      instrument  1      
      start       index
      duration    D_16
      amplitude   decay: _amp_fctr, index
      pitch       C1 + (cycle: index, _num_steps)
      func_table  1

      
write "exstatic3.sco"
  format csound
  # 'measures' with no keyword plays all measures in the script, in sequence
  measures "Measure 1"
  # phrases "1" #, "2", "3", "4", "5" # 
  # sections "1", "2", "3", "4"
  # "C => EFlat, EFlat => C", "EFlat => F, F => EFlat", "F => BFlat, BFlat => F", "BFlat => C, C => BFlat" , "foreground 1"

render "exstatic3.wav"
  orchestra  "markov_opt_1.orc"
