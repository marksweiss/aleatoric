$LOAD_PATH << "../lib"
require 'composer'
require_relative 'test_user_instruction'
module Aleatoric

# TESTING PURPOSES ONLY
reset_script_state
# test__phrase_lite_syntax
phrase "Intro Phrase" do
note "1" do
instrument 1
start 0.0
duration 0.5
volume 1000
pitch 7.01
func_table 1
end
note "2" do
instrument 1
start 1.0
duration 1.0
amplitude 1100
pitch 7.02
func_table 1
end
end
write "composer_test_results.txt" do
format csound 
phrases "Intro Phrase"
end
# TESTING PURPOSES ONLY
reset_script_state
# test__measure_lite_syntax
measure "Measure 1" do
note "1" do
instrument 1
start 0.0
duration 0.5
amplitude 1000
pitch 7.01
func_table 1
end
note "2" do
instrument 1
start 1.0
duration 1.0
amplitude 1100
pitch 7.02
func_table 1
end
end
measure "Measure 2" do
note "3" do
instrument 1
start 0.0
duration 0.5
amplitude 1200
pitch 7.03
func_table 1
end
note "4" do
instrument 1
start 1.0
duration 1.0
amplitude 1300
pitch 7.04
func_table 1
end
end
write "composer_test_results.txt" do
format csound 
measures "Measure 1","Measure 2"
end
# TESTING PURPOSES ONLY
reset_script_state
# test__copy_measure_lite_syntax
measure "Measure 1" do
note "1" do
instrument 1
start 0.0
duration 0.5
amplitude 1000
pitch 7.01
func_table 1
end
note "2" do
instrument 1
start 1.0
duration 1.0
amplitude 1100
pitch 7.02
func_table 1
# NOTE: copy_measure automatically adjusts start times of new measure to be in NEXT position
# after end of last note in measure being copied,intended for sequence of notes
# TODO: IS THIS USEFUL? MODERATELY,but only serves that one use case,NOT a really useful general
# cloning mechanism
end
end
copy_measure "Measure 1","Measure 2" do
end
write "composer_test_results.txt" do
format csound 
measures
end
# TESTING PURPOSES ONLY
reset_script_state
# test__section_lite_syntax
section "Intro Section" do
phrase "Intro Phrase" do
note "3" do
instrument 3
start 0.0
duration 0.5
amplitude 1000
pitch 7.03
func_table 1
end
note "4" do
instrument 4
start 1.0
duration 1.0
amplitude 1100
pitch 7.04
func_table 1
end
end
end
write "composer_test_results.txt" do
format csound 
sections "Intro Section"
end
# TESTING PURPOSES ONLY
reset_script_state
# test__repeat_index_lite_syntax
phrase "Loop" do
repeat 2 do|index |
note "1" do
instrument 1
start 1.0*index
duration 0.2
amplitude 1000 +(100*index )
pitch 7.02
func_table 1
end
note "2" do
instrument 1
start 1.0*index
duration 0.2
amplitude 1000 +(100*index )
pitch 7.02
func_table 1
end
end
end
write "composer_test_results.txt" do
format csound 
phrases "Loop"
end
# TESTING PURPOSES ONLY
reset_script_state
# test__sections_phrases_lite_syntax
section "Intro Section" do
phrase "Intro Phrase" do
note "5" do
instrument 1
start 0.0
duration 0.5
amplitude 1000
pitch 7.01
func_table 1
end
note "6" do
instrument 1
start 1.0
duration 1.0
amplitude 1100
pitch 7.02
func_table 1
end
end
phrase "Coda" do
note "7" do
instrument 1
start 0.0
duration 0.5
amplitude 1000
pitch 7.01
func_table 1
end
note "8" do
instrument 1
start 1.0
duration 1.0
amplitude 1100
pitch 7.02
func_table 1
end
end
end
write "composer_test_results.txt" do
format csound 
sections "Intro Section"
end
# TESTING PURPOSES ONLY
reset_script_state
# test__assignment
note_name_3="3"
note_name_4="4"
instr_num_3=3
instr_num_4=4
pitch_3=7.03
pitch_4=7.04
section "Intro Section" do
phrase "Intro Phrase" do
note "3" do
instrument 3
start 0.0
duration 0.5
amplitude 1000
pitch 7.03
func_table 1
end
note "4" do
instrument 4
start 1.0
duration 1.0
amplitude 1100
pitch 7.04
func_table 1
end
end
end
write "composer_test_results.txt" do
format csound 
sections "Intro Section"
end
# TESTING PURPOSES ONLY
reset_script_state
# test__assignment_comment
note_name_3="3" # comment blah blah
note_name_4="4"
instr_num_3=3 # comment blah blah
instr_num_4=4 # comment blah blah
pitch_3=7.03
pitch_4=7.04
# comment blah blah
section "Intro Section" do # comment blah blah
phrase "Intro Phrase" do # comment blah blah
note "3" do # comment blah blah
instrument 3 # comment blah blah
start 0.0
duration 0.5
amplitude 1000
pitch 7.03
func_table 1
# comment blah blah
end
note "4" do
instrument 4
start 1.0
duration 1.0
amplitude 1100
pitch 7.04
func_table 1
# comment blah blah
end
end
end
write "composer_test_results.txt" do
# comment blah blah
format csound 
sections "Intro Section"
end
# TESTING PURPOSES ONLY
reset_script_state
# test__assignment_2
note_name_3="3"
phrase "Intro Phrase" do
note "3" do
instrument 1
start 0.0
duration 0.5
amplitude 1000
pitch 7.01
func_table 1
end
end
write "composer_test_results.txt" do
format csound 
phrases "Intro Phrase"
end
# TESTING PURPOSES ONLY
reset_script_state
# test__repeat_until
player "Player 1" do
phrase "Loop" do
repeat_until "I want to stop" do
note do
instrument 1
start 1.0*1.0
duration 0.2
amplitude 1000 +(100*1 )
pitch 7.02
func_table 1
end
end
end
end
instruction "Exit Loop" do
description "call repeat_until('I want to stop' )"
players "Player 1" 
end
play do
players "Player 1" 
end
write "composer_test_results.txt" do
format csound 
phrases "Loop"
end
# TESTING PURPOSES ONLY
reset_script_state
# test__next
measure "Loop" do
note do
instrument 1
start 0.0
duration 1.0
amplitude 1000
pitch 7.01
func_table 1
end
note do
instrument 1
start @cur_start
duration 1.0
amplitude 1100
pitch 7.02
func_table 1
end
end
write "composer_test_results.txt" do
format csound 
measures "Loop"
end
# TESTING PURPOSES ONLY
reset_script_state
# test__render_lite_syntax
phrase "Intro Phrase" do
note "1" do
instrument 1
start 0.0
duration 0.5
amplitude 1000
pitch 7.01
func_table 1
end
note "2" do
instrument 1
start 1.0
duration 1.0
amplitude 1100
pitch 7.02
func_table 1
end
end
write "composer_test_results.txt" do
format csound 
phrases "Intro Phrase"
end
render "composer_test.wav" do
orchestra "markov_opt_1.orc"
end
# TESTING PURPOSES ONLY
reset_script_state
# test__meter_lite_syntax
meter 4,4 do
quantize on 
# This tests case of not needing to quantize. Two HLF notes at correct start times that
# take up exactly the correct length of the measure
end
measure "Measure 1" do
note "1" do
instrument 1
start 0.0
duration HLF, true
amplitude 1000
pitch 7.01
func_table 1
end
note "2" do
instrument 1
start HLF, true
duration HLF, true
amplitude 1100
pitch 7.02
func_table 1
# This tests quantize
# Each note is first mapped to QRTR,but that is only half the beat length of the meter
# so then each is increased to reach the total necessary duration,and each maintains the same
# percentage of the total duration,so then each is moved from QRTR to HLF,since the meter
# is 4/4,which is 4 beats of QRTR notes,or one WHL note. Note this adjusts start time of second
# note correctly also
end
end
measure "Measure 2" do
note "1" do
instrument 1
start 0.0
duration QRTR, true
amplitude 1000
pitch 7.01
func_table 1
end
note "2" do
instrument 1
start QRTR, true
duration QRTR, true
amplitude 1100
pitch 7.02
func_table 1
end
end
write "composer_test_results.txt" do
format csound 
measures
end
# TESTING PURPOSES ONLY
reset_script_state
# test__tempo
# Define a simple function to test tempo handling complex
# expression for duration
def times_two( x)
2.0*x
# Tempo is specified in bpm,i.e. 60== 60 quarter notes/min
# or a quarter note is 1 sec. or a whole note is 4 secs.
# If it is set,AND durations are specified using duration constants
# such as WHL,HLF,etc. The reason for this is that if the score specifies
# exact tempos in seconds,not just " relative " lengths such as WHL etc. then
# those exact tempos should be honored
end
tempo 30 
# Test expression rather than simple 2-token line
measure "Measure 1" do
note "1" do
instrument 1
start 0.0
duration WHL+HLF, true
amplitude 1000
pitch 7.01
func_table 1
end
note "2" do
instrument 1
start EITH, true
duration times_two( HLF ), true
amplitude 1100
pitch 7.02
func_table 1
end
note "3" do
instrument 1
start 0.0
duration QRTR, true
amplitude 1200
pitch 7.03
func_table 1
# You can reset tempo whenever you want.
end
end
tempo 120 
# Test expression rather than simple 2-token line
measure "Measure 2" do
note "4" do
instrument 1
start 0.0
duration WHL+HLF, true
amplitude 1000
pitch 7.01
func_table 1
end
note "5" do
instrument 1
start QRTR+QRTR, true
duration HLF, true
amplitude 1100
pitch 7.02
func_table 1
end
note "6" do
instrument 1
start 0.0
duration QRTR, true
amplitude 1200
pitch 7.03
func_table 1
end
end
write "composer_test_results.txt" do
format csound 
measures "Measure 1","Measure 2"
end
# TESTING PURPOSES ONLY
reset_script_state
# test__tempo_default
# Don't set tempo and default is 60 bpm,quarter note== 1 sec
# tempo 30
measure "Measure 1" do
note "1" do
instrument 1
start 0.0
duration WHL, true
amplitude 1000
pitch 7.01
func_table 1
end
note "2" do
instrument 1
start 1.0
duration HLF, true
amplitude 1100
pitch 7.02
func_table 1
end
note "3" do
instrument 1
start 0.0
duration QRTR, true
amplitude 1200
pitch 7.03
func_table 1
end
end
write "composer_test_results.txt" do
format csound 
measures "Measure 1"
end
# TESTING PURPOSES ONLY
reset_script_state
# test__ensemble_phrase_play_players
ensemble "In C Orchestra" do
players "Player 1","Player 2" 
phrase "Phrase 1" do
note "1" do
instrument 1
start 1.0
duration 0.5
amplitude 1000
pitch 7.01
func_table 1
end
note "2" do
instrument 2
start 2.0
duration 1.0
amplitude 1100
pitch 7.02
func_table 1
end
end
end
play do
players "Player 1","Player 2" 
end
write "composer_test_results.txt" do
format csound 
players "Player 1","Player 2" 
# ensembles " In C Orchestra "
end
# TESTING PURPOSES ONLY
reset_script_state
# test__ensemble_phrase_play_ensembles
ensemble "In C Orchestra" do
players "Player 1","Player 2" 
phrase "Phrase 1" do
note "1" do
instrument 1
start 1.0
duration 0.5
amplitude 1000
pitch 7.01
func_table 1
end
note "2" do
instrument 2
start 2.0
duration 1.0
amplitude 1100
pitch 7.02
func_table 1
end
end
end
play do
ensembles "In C Orchestra" 
end
write "composer_test_results.txt" do
format csound 
ensembles "In C Orchestra" 
end
# TESTING PURPOSES ONLY
reset_script_state
# test__instruction_players
ensemble "In C Orchestra" do
players "Player 1","Player 2" 
phrase "Phrase 1" do
note "1" do
instrument 1
start 1.0
duration 0.5
amplitude 1000
pitch 7.01
func_table 1
end
note "2" do
instrument 2
start 2.0
duration 1.0
amplitude 1100
pitch 7.02
func_table 1
# Just tell one player in the ensemble to follow this instruction
# impl. in test_user_instruction.rb
end
end
end
instruction "Fortissimo" do
description "Player should play each note twice as loud as the notated volume of the note."
players "Player 1" 
# Just tell one player in the ensemble to follow this instruction
# impl. in test_user_instruction.rb
end
instruction "Pianissimo" do
description "Player should play each note half as loud as the notated volume of the note."
players "Player 2" 
# Tell all players in the ensemble to play
end
play do
ensembles "In C Orchestra" 
# Output notes from all players in the ensemble,generated by 'play' statement
end
write "composer_test_results.txt" do
format csound 
ensembles "In C Orchestra" 
end
# TESTING PURPOSES ONLY
reset_script_state
# test__instruction_players_ensembles
ensemble "In C Orchestra" do
players "Player 1","Player 2" 
end
player "Player 1" do
phrase "Phrase 1" do
note "1" do
instrument 1
start 1.0
duration 0.5
amplitude 1000
pitch 7.01
func_table 1
end
note "2" do
instrument 2
start 2.0
duration 1.0
amplitude 1100
pitch 7.02
func_table 1
end
end
end
player "Player 2" do
phrase "Phrase 1" do
note "3" do
instrument 3
start 3.0
duration 1.5
amplitude 1200
pitch 7.03
func_table 1
end
note "4" do
instrument 4
start 4.0
duration 2.0
amplitude 1300
pitch 7.04
func_table 1
# Just tell one player in the ensemble to follow this instruction
# impl. in test_user_instruction.rb
end
end
end
instruction "Fortissimo" do
description "Player should play each note twice as loud as the notated volume of the note."
players "Player 1" 
# Just tell one player in the ensemble to follow this instruction
# impl. in test_user_instruction.rb
end
instruction "Pianissimo" do
description "Player should play each note half as loud as the notated volume of the note."
players "Player 2" 
# impl. in test_user_instruction.rb
end
instruction "Each Player Appends Another Player's First Note" do
description "Each member of the ensemble should repeat the first note played by another member of the ensemble as their last note."
ensembles "In C Orchestra" 
# Tell all players in the ensemble to play
end
play do
ensembles "In C Orchestra" 
# Output notes from all players in the ensemble,generated by 'play' statement
end
write "composer_test_results.txt" do
format csound 
ensembles "In C Orchestra" 
end
# TESTING PURPOSES ONLY
reset_script_state
# test__instruction_players_state
ensemble "In C Orchestra" do
players "Player 1","Player 2" 
end
player "Player 1" do
phrase "Phrase 1" do
note "1" do
instrument 1
start 1.0
duration 0.5
amplitude 1000
pitch 7.01
func_table 1
end
note "2" do
instrument 2
start 2.0
duration 1.0
amplitude 1100
pitch 7.02
func_table 1
end
end
end
player "Player 2" do
phrase "Phrase 1" do
note "3" do
instrument 3
start 3.0
duration 1.5
amplitude 1200
pitch 7.03
func_table 1
end
note "4" do
instrument 4
start 4.0
duration 2.0
amplitude 1300
pitch 7.04
func_table 1
# NOTE: This is an artificial and useless use of state-checking,since it amounts to just
# alternating playing and not playing,but it's deterministic and so testable
# Requires setting state after playing and checking it before
# impl. in test_user_instruction.rb
end
end
end
instruction "Alternate" do
description "Player should play with a 0%chance if they played last time,and a 100%chance if they didn't play last time."
players "Player 1","Player 2" 
# Play three times,each Player should output twice(skipping the middle iteration )
end
repeat 3 do|index |
play do
ensembles "In C Orchestra" 
# Output notes from all players in the ensemble,generated by 'play' statement
end
end
write "composer_test_results.txt" do
format csound 
ensembles "In C Orchestra" 
end
# TESTING PURPOSES ONLY
reset_script_state
# test__instruction_ensemble_state
ensemble "In C Orchestra" do
players "Player 1","Player 2" 
end
player "Player 1" do
phrase "Phrase 1 1" do
note "1" do
instrument 1
start 1.0
duration 0.5
amplitude 1000
pitch 7.01
func_table 1
end
note "2" do
instrument 2
start 2.0
duration 1.0
amplitude 1100
pitch 7.02
func_table 1
end
end
end
player "Player 2" do
phrase "Phrase 2 1" do
note "3" do
instrument 3
start 3.0
duration 1.5
amplitude 1200
pitch 7.03
func_table 1
end
note "4" do
instrument 4
start 4.0
duration 2.0
amplitude 1300
pitch 7.04
func_table 1
# NOTE: This is an artificial and useless use of state-checking,since it amounts to just
# alternating playing and not playing,but it's deterministic and so testable
# Requires setting state after playing and checking it before
# impl. in test_user_instruction.rb
end
end
end
instruction "Alternate Ensemble" do
description "Ensemble should play with a 0%chance if they played last time,and a 100%chance if they didn't play last time."
ensembles "In C Orchestra" 
# Play three times,each Player should output twice(skipping the middle iteration )
end
repeat 3 do|index |
play do
ensembles "In C Orchestra" 
# Output notes from all players in the ensemble,generated by 'play' statement
end
end
write "composer_test_results.txt" do
format csound 
ensembles "In C Orchestra" 
end
# TESTING PURPOSES ONLY
reset_script_state
# test__improvise_player
format csound 
player "Player 1" do
# NOTE: This is an artificial improv that always returns the same thing,for testing
# impl. in test_user_instruction.rb
end
improvisation "Play a whole note on Middle C" do
description "Test improvisation"
players "Player 1" 
end
improvise do
players "Player 1" 
# Output notes from all players in the ensemble,generated by 'play' statement
end
write "composer_test_results.txt" do
players "Player 1" 
end
# TESTING PURPOSES ONLY
reset_script_state
# test__improvise2_player
format csound 
player "Player 1" do
end
player "Player 2" do
end
improvisation "Play a whole note on Middle C" do
description "Test improvisation"
players "Player 1" 
end
improvisation "Play a whole note on Middle D" do
description "Test improvisation"
players "Player 2" 
end
improvise "Play a whole note on Middle C" do
players "Player 1" 
end
improvise "Play a whole note on Middle D" do
players "Player 2" 
end
write "composer_test_results.txt" do
players "Player 1","Player 2" 
end
# TESTING PURPOSES ONLY
reset_script_state
# test__render_lite_syntax_default_write
phrase "Intro Phrase" do
note "1" do
instrument 1
start 0.0
duration 0.5
amplitude 1000
pitch 7.01
func_table 1
end
note "2" do
instrument 1
start 1.0
duration 1.0
amplitude 1100
pitch 7.02
func_table 1
end
end
render "composer_test.wav" do
phrases "Intro Phrase"
format csound 
orchestra "markov_opt_1.orc"
end
# TESTING PURPOSES ONLY
reset_script_state
# test__phrase_midi_lite_syntax
format midi 
phrase "Intro Phrase" do
# Using aliased MIDI property names for note. Note 'channel' is midi-only
note "1" do
instrument 1
time 0.0
duration 1.0
velocity 100
pitch 64
channel 1
# Using csound and " Aleatoric normal " property names for a note. Note 'channel' is midi-only
end
note "2" do
instrument 1
start 1.0
duration 1.0
amplitude 100
pitch 65
channel 1
# Using csound and " Aleatoric normal " property names for a note,but switch to use 'volume' for 'velocity.' Note 'channel' is midi-only
end
note "3" do
instrument 1
start 2.0
duration 1.0
volume 100
pitch 66
channel 1
end
end
write "composer_test_results.txt" do
format midi 
phrases "Intro Phrase"
end
# TESTING PURPOSES ONLY
reset_script_state
# test__phrase_midi_format_top
format midi 
phrase "Intro Phrase" do
# Using aliased MIDI property names for note. Note 'channel' is midi-only
note "1" do
instrument 1
time 0.0
duration 1.0
velocity 100
pitch 64
channel 1
# Using csound and " Aleatoric normal " property names for a note. Note 'channel' is midi-only
end
note "2" do
instrument 1
start 1.0
duration 1.0
amplitude 100
pitch 65
channel 1
# Using csound and " Aleatoric normal " property names for a note,but switch to use 'volume' for 'velocity.' Note 'channel' is midi-only
end
note "3" do
instrument 1
start 2.0
duration 1.0
volume 100
pitch 66
channel 1
end
end
write "composer_test_results.txt" do
phrases "Intro Phrase"
end
# TESTING PURPOSES ONLY
reset_script_state
# test__ensemble_instrument_channel_midi_render
format midi 
player "Player 1" do
instrument 1
channel 1
end
player "Player 2" do
instrument 2
channel 2
end
ensemble "In C Orchestra" do
players "Player 1","Player 2" 
phrase "Intro Phrase" do
note "1" do
time 0.0
duration 1.0
velocity 100
pitch 64
end
note "2" do
start 1.0
duration 1.0
amplitude 100
pitch 65
end
note "3" do
start 2.0
duration 1.0
volume 100
pitch 66
end
end
end
play do
ensembles "In C Orchestra" 
end
write "composer_test_results.txt" do
ensembles "In C Orchestra" 
end


end
